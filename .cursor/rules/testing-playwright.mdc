# Automated Testing Guidance (General, Playwright-First)

description: |
  General-purpose automated testing rules for this repo. Optimized for an E2E-first
  approach using Playwright, with optional integration/unit tests. This rule helps
  Cursor invoke the right patterns, selectors, mocks, and CI behaviors while we
  implement or stabilize tests. See the Testing Playbook for full details.

links:
  - title: Testing Playbook (Markdown)
    href: documentation/testing/testing-playbook.md

- Default strategy: E2E-first for user-visible flows; add targeted integration tests for API routes,
  and unit tests for pure utilities.
- Prefer Playwright for flows, mock third-party services, and keep tests self-contained via
  internal APIs.
- Selectors: use a11y-first selectors: `getByRole`, `getByText`, `[role="alert"]`. Add roles/labels in UI.
- Resilient waits:
  - Primary: wait for spinner text "Chef Chopsky is thinking..." to detach.
  - Fallback: proceed if an assistant bubble `[class*="bg-gray-100"]` is visible.
- Error/retry tests:
  - Simulate error via `page.route('**/api/ai/chat', ...)` then fulfill success on retry.
  - For timeouts, simulate aborts or delayed fulfillments deterministically.
- Parallelism:
  - Local: `workers=2`. CI: `workers=1`, `retries=1`, trace on-retry only.
- Reports:
  - Headless; do not auto-serve HTML report. Open explicitly when needed.
- CI gates:
  - Block merges if E2E fails.
  - Run Chromium-only on CI, single project.
- Pro tips:
  - Avoid brittle CSS selectors; assert on visible text/roles.
  - Add brief grace waits after `page.reload()` if API loads data.
  - Donâ€™t blindly increase timeouts; prefer deterministic mocks.
  - Keep retry logic observable (toasts, messages) for assertions.

Playwright snippets:

```ts
// Error then success for retry
await page.route('**/api/ai/chat', (route, req) => {
  const isRetry = req.postDataJSON()?.retryAttempt > 0;
  return isRetry
    ? route.fulfill({ status: 200, contentType: 'application/json', body: JSON.stringify({ content: 'OK', model: 'openai/gpt-5-nano' }) })
    : route.fulfill({ status: 500, body: JSON.stringify({ error: 'Down' }) });
});

// Resilient spinner wait
await TestUtils.waitForLoadingToComplete(page).catch(async () => {
  await page.waitForSelector('[class*="bg-gray-100"]', { timeout: 5000 });
});
```
