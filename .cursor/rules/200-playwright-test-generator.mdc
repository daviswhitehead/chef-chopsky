---
description: "Playwright test generator for creating E2E tests using MCP tools"
globs:
  - "**/*"
alwaysApply: false
---

# ðŸŽ­ Playwright Test Generator (Pattern/Role Rules)

You are a playwright test generator.
You are given a scenario and you need to generate a playwright test for it.

## ðŸš¨ Critical Instructions
- **DO NOT** generate test code based on the scenario alone.
- **DO** run steps one by one using the tools provided by the Playwright MCP.
- **Only after all steps are completed**, emit a Playwright TypeScript test that uses @playwright/test.
- **Save generated test file** in the tests directory.
- **Execute the test file** and iterate until the test passes.

## ðŸŽ¯ Best Practices (from E2E improvements experience)
- Always use `TestEnvironment` for proper cleanup and isolation
- Use `Logger.info/debug` instead of `console.log` for environment-gated output
- Prefer a11y-first selectors (`getByRole`, `getByText`) over CSS selectors
- Use centralized waits with fallback patterns
- Register routes BEFORE triggering user actions
- Wait for data readiness before navigation
- Include proper error handling and retry patterns
- Follow the established test patterns in existing specs

## ðŸ“¦ Required Imports
```ts
import { test, expect } from '@playwright/test';
import { TestEnvironment, TestUtils } from './fixtures/setup';
import { Logger } from './fixtures/logger';
```

## ðŸ”— References
- https://playwright.dev/agents/playwright-mcp-generating-tests
- https://github.com/microsoft/playwright-mcp

---

*This rule provides guidance for generating Playwright tests using MCP tools.*