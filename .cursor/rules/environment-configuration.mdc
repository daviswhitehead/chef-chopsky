---
description: "Environment and configuration management rules to prevent mock mode issues and ensure production-ready setups"
globs:
  - "**/*"
alwaysApply: true
---

# üö® Environment & Configuration Management Rules

## üéØ Core Principle: Never Ship Mock Mode to Production

### ‚ùå NEVER DO THIS
- Use mock/test data in production environments
- Ship services with placeholder API keys (`'test-key'`, `'your_api_key_here'`)
- Allow services to silently fall back to mock mode
- Deploy without validating environment configuration
- Use mock responses in integration or production contexts

### ‚úÖ ALWAYS DO THIS
- **Environment Validation**: Validate all required environment variables at startup
- **Clear Error Messages**: Show explicit warnings when services run in mock mode
- **Production Guards**: Prevent mock mode in production environments
- **Setup Scripts**: Provide automated environment validation and setup
- **Documentation**: Keep `.env.example` files accurate and complete

## üîß Configuration Management

### Environment File Requirements
- **`.env.example` files must be accurate and complete**
- **Never commit `.env` files to version control**
- **Always validate environment variables at startup**
- **Provide clear setup instructions in README**

### API Key Validation
```typescript
// ‚úÖ GOOD: Validate API keys at startup
if (config.openaiApiKey === 'test-key' || !config.openaiApiKey || config.openaiApiKey === 'your_openai_api_key_here') {
  console.warn('‚ö†Ô∏è  WARNING: Service running in MOCK MODE!');
  console.warn('‚ö†Ô∏è  Set valid API key to get real responses');
  // In production, this should be an error, not a warning
}

// ‚úÖ GOOD: Production environment check
if (process.env.NODE_ENV === 'production' && isMockMode) {
  throw new Error('Cannot run in mock mode in production');
}
```

### Service Startup Validation
- **Log environment status on startup**
- **Warn if running in mock mode**
- **Provide clear instructions for fixing configuration**
- **Fail fast if critical configuration is missing**

## üõ°Ô∏è Prevention Measures

### Development Workflow
- **Run `npm run setup` before starting development**
- **Check environment validation output**
- **Never ignore mock mode warnings**
- **Test with real services, not mocks**

### CI/CD Integration
- **Validate environment configuration in CI**
- **Fail builds if services would run in mock mode**
- **Require real API keys for integration tests**
- **Test environment setup scripts**

### Code Quality
- **Mock responses only in unit tests**
- **Integration tests must use real services**
- **Production code paths never use mock data**
- **Clear separation between test and production code**

## üìã Environment Setup Checklist

### Before Development
- [ ] Run `npm run setup` to validate environment
- [ ] Check all `.env` files have real credentials
- [ ] Verify no placeholder values remain
- [ ] Confirm services start without mock mode warnings

### Before Deployment
- [ ] All environment variables are production-ready
- [ ] No mock/test API keys in production
- [ ] Environment validation passes
- [ ] Services start without warnings

### After Deployment
- [ ] Verify services are using real APIs
- [ ] Check logs for mock mode warnings
- [ ] Test end-to-end functionality
- [ ] Confirm observability is working

## üö® Red Flags to Watch For

### Code Red Flags
- `config.apiKey === 'test-key'`
- `isMockMode = true` in production code
- Hardcoded mock responses in service code
- Missing environment validation

### Runtime Red Flags
- Services starting with mock mode warnings
- Truncated responses ending with "..."
- Generic responses that don't match user input
- Missing observability traces

### Setup Red Flags
- `.env` files with placeholder values
- Missing environment files
- Setup scripts failing validation
- README with outdated setup instructions

## üéØ Success Criteria

- **Services always use real APIs in production**
- **Clear warnings when running in mock mode**
- **Automated environment validation**
- **Easy setup process for new developers**
- **No silent fallbacks to mock mode**
- **Production deployments fail fast if misconfigured**

## üîß Implementation Patterns

### Environment Validation Script
```bash
#!/bin/bash
# Check environment configuration
if grep -q "your_api_key_here" agent/.env; then
  echo "‚ùå Agent will run in MOCK MODE"
  echo "‚ùå Set real API key in agent/.env"
  exit 1
fi
```

### Service Startup Validation
```typescript
// Validate configuration on startup
console.log('üîß Service Startup Validation...');
if (isMockMode) {
  console.warn('‚ö†Ô∏è  WARNING: Running in MOCK MODE!');
  console.warn('‚ö†Ô∏è  Set valid API key to get real responses');
  if (process.env.NODE_ENV === 'production') {
    throw new Error('Cannot run in mock mode in production');
  }
}
```

### Test Environment Separation
```typescript
// ‚úÖ GOOD: Clear separation between test and production
const isTestMode = process.env.NODE_ENV === 'test' || process.env.USE_MOCK === 'true';
const isProduction = process.env.NODE_ENV === 'production';

if (isProduction && isMockMode) {
  throw new Error('Production cannot use mock mode');
}
```