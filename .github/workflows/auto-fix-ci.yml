name: Auto Fix CI Failures (MVP)

on:
  workflow_run:
    workflows: [CI, Test Chef Chopsky Agent]
    types: [completed]

jobs:
  analyze-and-fix:
    if: >-
      ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.name != 'Auto Fix CI Failures (MVP)' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm run install:all
      
      - name: Configure Git
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"
      
      - name: Extract failure context
        id: context
        run: |
          echo "WORKFLOW_RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
          echo "WORKFLOW_RUN_URL=${{ github.event.workflow_run.html_url }}" >> $GITHUB_OUTPUT
          echo "HEAD_BRANCH=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_OUTPUT
          echo "HEAD_SHA=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
      
      - name: Get PR information
        id: pr-info
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get PR number from the head branch
          PR_NUMBER=$(gh pr list --head "${{ steps.context.outputs.HEAD_BRANCH }}" --json number --jq '.[0].number' || echo "")
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR found for branch ${{ steps.context.outputs.HEAD_BRANCH }}"
            exit 1
          fi
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Found PR #$PR_NUMBER"
      
      - name: Create fix branch
        id: fix-branch
        run: |
          PR_NUMBER="${{ steps.pr-info.outputs.PR_NUMBER }}"
          FIX_BRANCH="ci-fix-${PR_NUMBER}"
          
          # Check if fix branch already exists
          if git show-ref --verify --quiet refs/remotes/origin/$FIX_BRANCH; then
            echo "Fix branch $FIX_BRANCH already exists, updating..."
            git checkout $FIX_BRANCH
            git pull origin $FIX_BRANCH
          else
            echo "Creating new fix branch $FIX_BRANCH"
            git checkout -b $FIX_BRANCH
          fi
          
          echo "FIX_BRANCH=$FIX_BRANCH" >> $GITHUB_OUTPUT
      
      - name: Install Cursor CLI
        run: |
          curl -fsSL https://cursor.com/install | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH
      
      - name: Fix CI failure with Cursor CLI
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          MODEL: auto
          GH_TOKEN: ${{ github.token }}
          BRANCH_PREFIX: ci-fix
        run: |
          cursor-agent -p "You are operating in a GitHub Actions runner.

          The GitHub CLI is available as \`gh\` and authenticated via \`GH_TOKEN\`. Git is available. You have write access to repository contents and can comment on pull requests, but you must not create or edit PRs directly.

          # Context:
          - Repo: ${{ github.repository }}
          - Owner: ${{ github.repository_owner }}
          - Workflow Run ID: ${{ github.event.workflow_run.id }}
          - Workflow Run URL: ${{ github.event.workflow_run.html_url }}
          - Fix Branch Prefix: ${{ env.BRANCH_PREFIX }}

          # Goal:
          - Implement an end-to-end CI fix flow driven by the failing PR, creating a separate persistent fix branch and proposing a quick-create PR back into the original PR's branch.

          # Requirements:
          1) Identify the PR associated with the failed workflow run and determine its base and head branches. Let HEAD_REF be the PR's head branch (the contributor/origin branch).
          2) Maintain a persistent fix branch for this PR head using the Fix Branch Prefix from Context. Create it if missing, update it otherwise, and push changes to origin.
          3) Attempt to resolve the CI failure by making minimal, targeted edits consistent with the repo's style. Keep changes scoped and safe.
          4) You do NOT have permission to create PRs. Instead, post or update a single natural-language PR comment (1â€“2 sentences) that briefly explains the CI fix and includes an inline compare link to quick-create a PR.
          5) Create an AUTO_FIX_ANALYSIS.md file with comprehensive context for interactive debugging sessions.

          # Analysis File Requirements:
          Create AUTO_FIX_ANALYSIS.md with:
          - List of failed checks
          - Relevant log excerpts for each failure
          - Environment information (Node version, OS, etc.)
          - Recent commits and changed files
          The entire doc should be copy-paste ready to kick off an interactive debugging session for these issues within the Cursor App.

          # Inputs and conventions:
          - Use \`gh api\`, \`gh run view\`, \`gh pr view\`, \`gh pr diff\`, \`gh pr list\`, \`gh run download\`, and git commands as needed to discover the failing PR and branches.
          - Avoid duplicate comments; if a previous bot comment exists, update it instead of posting a new one.
          - If no actionable fix is possible, make no changes and post no comment.

          # Deliverables when updates occur:
          - Pushed commits to the persistent fix branch for this PR head.
          - AUTO_FIX_ANALYSIS.md file with comprehensive debugging context.
          - A single natural-language PR comment on the original PR that includes the inline compare link above.
          " --force --model "$MODEL" --output-format=text
      
      
