# name: PR Validation

# on:
#   pull_request:
#     branches: [ main, develop ]

# env:
#   # Test environment variables
#   NODE_ENV: test
#   FRONTEND_URL: http://localhost:3000
#   AGENT_URL: http://localhost:3001
#   AGENT_SERVICE_URL: http://localhost:3001
  
#   # Supabase test configuration
#   NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
#   NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.SUPABASE_PUBLISHABLE_KEY }}
  
#   # OpenAI API key for agent tests
#   OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
#   # LangSmith configuration
#   LANGCHAIN_TRACING_V2: true
#   LANGCHAIN_PROJECT: chef-chopsky-pr
#   LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}

# jobs:
#   # Fast feedback: linting and unit tests
#   quick-checks:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
      
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20.x'
#         cache: 'npm'
        
#     - name: Install dependencies
#       run: npm run install:all
      
#     - name: Lint code
#       run: npm run lint
      
#     - name: Run unit tests
#       run: npm run test
      
#     - name: Build applications
#       run: npm run build

#   # High-value integration tests (fast, no services needed)
#   integration-tests:
#     runs-on: ubuntu-latest
#     needs: quick-checks
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
      
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20.x'
#         cache: 'npm'
        
#     - name: Install dependencies
#       run: npm run install:all
      
#     - name: Build applications
#       run: npm run build
      
#     - name: Run high-value integration tests
#       run: |
#         echo "üß™ Running high-value integration tests..."
#         echo "Testing service configuration, error handling, and API validation"
#         cd frontend && npm run test:integration:all

#   # Full E2E tests (only on main branch or when explicitly requested)
#   e2e-tests:
#     runs-on: ubuntu-latest
#     needs: integration-tests
#     if: github.base_ref == 'main' || contains(github.event.pull_request.labels.*.name, 'run-e2e')
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
      
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20.x'
#         cache: 'npm'
        
#     - name: Install dependencies
#       run: npm run install:all
      
#     - name: Install Playwright browsers
#       run: cd frontend && npx playwright install --with-deps chromium
      
#     - name: Build applications
#       run: npm run build
      
#     - name: Start services
#       run: |
#         echo "üöÄ Starting services for E2E tests..."
#         npm run start:services &
        
#     - name: Wait for services to be ready
#       run: |
#         echo "‚è≥ Waiting for services to be ready..."
#         timeout 120s node scripts/health-check.js
#         if [ $? -ne 0 ]; then
#           echo "‚ùå Services failed to start within 120 seconds"
#           ps aux | grep -E "(next|tsx)" | grep -v grep || echo "No services found"
#           exit 1
#         fi
#         echo "‚úÖ All services are ready!"
        
#     - name: Run E2E tests
#       run: |
#         echo "üé≠ Running E2E tests..."
#         npm run test:e2e
        
#     - name: Stop services
#       if: always()
#       run: |
#         echo "üõë Stopping services..."
#         npm run stop:services || true
#         pkill -f 'next dev' || true
#         pkill -f 'tsx watch' || true
        
#     - name: Upload E2E test results
#       if: always()
#       uses: actions/upload-artifact@v4
#       with:
#         name: e2e-test-results-pr-${{ github.event.number }}
#         path: |
#           frontend/test-results/
#           frontend/playwright-report/
#         retention-days: 3

#   # Security audit
#   security:
#     runs-on: ubuntu-latest
#     needs: quick-checks
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
      
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20.x'
#         cache: 'npm'
        
#     - name: Install dependencies
#       run: npm run install:all
      
#     - name: Run security audit
#       run: |
#         npm audit --audit-level=moderate
#         cd frontend && npm audit --audit-level=moderate
#         cd ../agent && npm audit --audit-level=moderate
