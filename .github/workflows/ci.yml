name: CI

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

env:
  # Test environment variables
  NODE_ENV: test
  FRONTEND_URL: http://localhost:3000
  AGENT_URL: http://localhost:3001
  AGENT_SERVICE_URL: http://localhost:3001
  
  # Supabase test configuration (using test database)
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.SUPABASE_PUBLISHABLE_KEY }}
  
  # OpenAI API key for agent tests
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
  # LangSmith configuration (optional)
  LANGCHAIN_TRACING: true
  LANGCHAIN_PROJECT: chef-chopsky-ci
  LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}

jobs:
  # Unit tests and linting (fast feedback)
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm run install:all
      
    - name: Lint code
      run: npm run lint
      
    - name: Run unit tests
      run: |
        echo "🧪 Running frontend unit tests..."
        cd frontend && npm run test:unit
        echo "🤖 Running agent unit tests..."
        cd .. && cd agent && npm run test:unit
      
    - name: Build applications
      run: npm run build
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          frontend/coverage/
          agent/coverage/
        retention-days: 7

  # Integration and E2E tests with service orchestration
  integration-e2e:
    runs-on: ubuntu-latest
    needs: test
    
    env:
      # Agent service environment variables
      NODE_ENV: test
      LOG_LEVEL: info
      LANGSMITH_TRACING: true
      LANGSMITH_PROJECT: chef-chopsky-ci
      LANGGRAPH_PORT: 2024
      LANGGRAPH_HOST: localhost
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm run install:all
      
    - name: Install Playwright browsers
      run: cd frontend && npx playwright install --with-deps chromium
      
    - name: Build applications
      run: npm run build
      
    - name: Start services
      run: |
        echo "🚀 Starting services for integration and E2E tests..."
        ./scripts/start-services.sh &
        echo "Services started in background"
        
    - name: Wait for services to be ready
      run: |
        echo "⏳ Waiting for services to be ready..."
        timeout 120s node scripts/health-check.js
        if [ $? -ne 0 ]; then
          echo "❌ Services failed to start within 120 seconds"
          echo "📋 Checking service status..."
          ps aux | grep -E "(next|tsx)" | grep -v grep || echo "No services found"
          exit 1
        fi
        echo "✅ All services are ready!"
        
    - name: Run integration tests
      run: |
        echo "🧪 Running frontend integration tests..."
        cd frontend && npm run test:integration
        
    - name: Run agent integration tests
      run: |
        echo "🤖 Running agent integration tests..."
        cd agent && npm run test:integration
        
    - name: Run E2E tests
      run: |
        echo "🎭 Running E2E tests..."
        cd frontend && npm run test:e2e
        
    - name: Stop services
      if: always()
      run: |
        echo "🛑 Stopping services..."
        npm run stop:services || true
        # Ensure cleanup
        pkill -f 'next dev' || true
        pkill -f 'tsx watch' || true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-e2e-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
          frontend/coverage/integration/
        retention-days: 7

  # Staging E2E tests (tests against live staging environment)
  staging-e2e:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    env:
      # Staging environment URLs
      STAGING_FRONTEND_URL: https://chef-chopsky-git-staging.vercel.app
      STAGING_AGENT_URL: https://chef-chopsky-staging.up.railway.app
      
      # Staging Supabase configuration
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.STAGING_SUPABASE_PUBLISHABLE_KEY }}
      SUPABASE_SECRET_KEY: ${{ secrets.STAGING_SUPABASE_SECRET_KEY }}
      
      # OpenAI API key for staging tests
      OPENAI_API_KEY: ${{ secrets.STAGING_OPENAI_API_KEY }}
      
      # LangSmith configuration for staging
      LANGCHAIN_TRACING: true
      LANGCHAIN_PROJECT: chef-chopsky-staging
      LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm run install:all
      
    - name: Install Playwright browsers
      run: cd frontend && npx playwright install --with-deps chromium
      
    - name: Wait for staging services to be ready
      run: |
        echo "⏳ Checking staging services availability..."
        if curl -f https://chef-chopsky-git-staging.vercel.app >/dev/null 2>&1; then
          echo "✅ Staging frontend is available"
        else
          echo "⚠️ Staging frontend is not available (may not be deployed)"
        fi
        
        if curl -f https://chef-chopsky-staging.up.railway.app/health >/dev/null 2>&1; then
          echo "✅ Staging agent is available"
        else
          echo "⚠️ Staging agent is not available"
        fi
        
        echo "🎭 Proceeding with staging E2E tests (will handle service unavailability gracefully)"
        
    - name: Run staging E2E tests
      run: |
        echo "🎭 Running staging E2E tests..."
        cd frontend && npm run test:e2e:staging
        
    - name: Upload staging test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: staging-e2e-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
        retention-days: 7

  # High-value integration tests (service configuration and error handling)
  integration-high-value:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm run install:all
      
    - name: Build applications
      run: npm run build
      
    - name: Run high-value integration tests
      run: |
        echo "🧪 Running high-value integration tests..."
        echo "These tests validate service configuration, error handling, and API validation"
        cd frontend && npm run test:integration:all
        
    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: high-value-integration-results
        path: |
          frontend/coverage/integration/
        retention-days: 7

  # Security and dependency check
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm run install:all
      
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        cd frontend && npm audit --audit-level=moderate
        cd ../agent && npm audit --audit-level=moderate
