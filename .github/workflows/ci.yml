name: CI

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

env:
  # Global CI environment
  NODE_ENV: development
  CI: true
  LOG_LEVEL: info
  LANGGRAPH_PORT: 2024
  LANGGRAPH_HOST: localhost
  
  # LangSmith configuration
  LANGCHAIN_TRACING: true
  LANGCHAIN_PROJECT: chef-chopsky-ci
  LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
  
  # OpenAI API key for agent tests
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
  # Use development mode for integration tests to allow real API calls
  # Test mode skips validation and uses mocks, which breaks integration tests
  
  # Frontend build environment variables (for CI builds)
  NEXT_PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: placeholder_key
  SUPABASE_SECRET_KEY: placeholder_secret
  AGENT_SERVICE_URL: http://localhost:3001
  NEXT_PUBLIC_APP_ENV: ci
  APP_ENV: ci
  
  # Note: Supabase credentials are set dynamically after starting local Supabase CLI

jobs:
  # Code quality validation (fast feedback)
  code-quality:
    name: "Code Quality: Lint, Tests, Build"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'
      
    - name: Lint code
      run: npm run lint
      
    - name: Run unit tests
      run: |
        echo "🧪 Running frontend unit tests..."
        cd frontend && npm run test:unit
        echo "🤖 Running agent unit tests..."
        cd .. && cd agent && npm run test:unit
      
    - name: Build applications
      run: |
        echo "🔨 Building applications with NODE_ENV=production..."
        NODE_ENV=production npm run build
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-node20
        path: |
          frontend/coverage/
          agent/coverage/
        retention-days: 7

  # Integration and E2E tests with service orchestration
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    # Run in parallel with code-quality to reduce total wall time
    
    env:
      # Agent service environment variables (inherits global env)
      LANGGRAPH_PORT: 2024
      LANGGRAPH_HOST: localhost
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'

    - name: Cache npm
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-
    
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies with npm ci..."
        npm ci
        cd frontend && npm ci
        cd ../agent && npm ci
        cd ..
        echo "✅ Dependencies installed"
        
        echo "🔍 Verifying ts-jest installation..."
        cd frontend && npm list ts-jest
        echo "✅ ts-jest verification complete"
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Start Local Supabase
      run: |
        echo "🚀 Starting local Supabase (Docker-based)..."
        cd frontend 
        # Add retry logic for Docker pulls
        for i in {1..3}; do
          echo "Attempt $i to start Supabase..."
          if supabase start; then
            echo "✅ Local Supabase started successfully"
            break
          else
            echo "❌ Attempt $i failed, waiting 10s before retry..."
            sleep 10
            if [ $i -eq 3 ]; then
              echo "💥 All attempts failed, exiting"
              exit 1
            fi
          fi
        done
        
    - name: Extract Supabase Credentials
      run: |
        echo "🔑 Extracting Supabase credentials..."
        cd frontend
        supabase status -o env > /tmp/supabase.env
        echo "📋 Supabase credentials extracted to /tmp/supabase.env"
        
    - name: Set Environment Variables
      run: |
        echo "🔧 Setting environment variables from Supabase..."
        cd frontend
        export $(cat /tmp/supabase.env | xargs)
        echo "NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=$NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY" >> $GITHUB_ENV
        echo "SUPABASE_SECRET_KEY=$SUPABASE_SECRET_KEY" >> $GITHUB_ENV
        echo "✅ Environment variables set"
        
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-1.55.0
        restore-keys: |
          playwright-${{ runner.os }}-

    - name: Install Playwright browsers
      run: cd frontend && npx playwright install --with-deps chromium
      
    # Skip rebuilding here; dev servers are used for integration/E2E
      
    - name: Run integration tests
      run: |
        echo "🚀 Starting services for integration and E2E tests..."
        echo "📊 CI Environment Info:"
        echo "  - Node Version: $(node --version)"
        echo "  - NPM Version: $(npm --version)"
        echo "  - Working Directory: $(pwd)"
        echo "  - Available Ports: $(netstat -tuln | grep -E ':(3000|3001)' || echo 'Ports 3000, 3001 not in use')"
        
        ./scripts/start-services.sh &
        SERVICES_PID=$!
        echo "Services started in background (PID: $SERVICES_PID)"
        
        echo "⏳ Waiting for services to be ready..."
        timeout 120s node scripts/health-check.js
        HEALTH_CHECK_EXIT_CODE=$?
        
        if [ $HEALTH_CHECK_EXIT_CODE -ne 0 ]; then
          echo "❌ Services failed to start within 120 seconds (exit code: $HEALTH_CHECK_EXIT_CODE)"
          echo "📋 Checking service status..."
          echo "  - Background processes:"
          ps aux | grep -E "(next|tsx|start-services)" | grep -v grep || echo "No services found"
          echo "  - Port usage:"
          netstat -tuln | grep -E ':(3000|3001)' || echo "Ports 3000, 3001 not in use"
          echo "  - Service logs (last 20 lines):"
          tail -20 /tmp/chef-chopsky-services.log 2>/dev/null || echo "No service logs found"
          exit 1
        fi
        echo "✅ All services are ready!"
        
        echo "📊 Pre-test Service Status:"
        echo "  - Frontend: $(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/ || echo 'unreachable')"
        echo "  - Agent Health: $(curl -s -o /dev/null -w '%{http_code}' http://localhost:3001/health || echo 'unreachable')"
        
        echo "🔑 Validating OpenAI API key..."
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ OPENAI_API_KEY is not set"
          exit 1
        fi
        
        # Check if API key looks valid (starts with sk-)
        if [[ ! "$OPENAI_API_KEY" =~ ^sk- ]]; then
          echo "❌ OPENAI_API_KEY does not appear to be valid (should start with 'sk-')"
          echo "Current key format: ${OPENAI_API_KEY:0:10}..."
          exit 1
        fi
        
        # Check key length (should be around 50+ characters)
        if [ ${#OPENAI_API_KEY} -lt 40 ]; then
          echo "❌ OPENAI_API_KEY appears to be too short (${#OPENAI_API_KEY} characters)"
          exit 1
        fi
        
        echo "✅ OpenAI API key validation passed"
        echo "Key format: ${OPENAI_API_KEY:0:10}... (${#OPENAI_API_KEY} characters)"
        
        echo "🤖 Running agent integration tests..."
        cd agent && npm run test:integration
        echo "✅ Agent integration tests completed"
        
    - name: Stop services
      if: always()
      run: |
        echo "🛑 Stopping services..."
        npm run stop:services || true
        # Ensure cleanup
        pkill -f 'next dev' || true
        pkill -f 'tsx watch' || true
        
        echo "🛑 Stopping local Supabase..."
        cd frontend && supabase stop || true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: agent-integration-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
          frontend/coverage/integration/
        retention-days: 7

  frontend-integration-tests:
    name: Frontend Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    env:
      LANGGRAPH_PORT: 2024
      LANGGRAPH_HOST: localhost
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'

    - name: Cache npm
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-
    
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies with npm ci..."
        npm ci
        cd frontend && npm ci
        cd ../agent && npm ci
        cd ..
        echo "✅ Dependencies installed"
        
        echo "🔍 Verifying ts-jest installation..."
        cd frontend && npm list ts-jest
        echo "✅ ts-jest verification complete"
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Start Local Supabase
      run: |
        echo "🚀 Starting local Supabase (Docker-based)..."
        cd frontend 
        # Add retry logic for Docker pulls
        for i in {1..3}; do
          echo "Attempt $i to start Supabase..."
          if supabase start; then
            echo "✅ Local Supabase started successfully"
            break
          else
            echo "❌ Attempt $i failed, waiting 10s before retry..."
            sleep 10
            if [ $i -eq 3 ]; then
              echo "💥 All attempts failed, exiting"
              exit 1
            fi
          fi
        done
        
    - name: Extract Supabase Credentials
      run: |
        echo "🔑 Extracting Supabase credentials..."
        cd frontend
        supabase status -o env > /tmp/supabase.env
        echo "📋 Supabase credentials extracted to /tmp/supabase.env"
        
    - name: Set Environment Variables
      run: |
        echo "🔧 Setting environment variables from Supabase..."
        cd frontend
        export $(cat /tmp/supabase.env | xargs)
        echo "NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=$NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY" >> $GITHUB_ENV
        echo "SUPABASE_SECRET_KEY=$SUPABASE_SECRET_KEY" >> $GITHUB_ENV
        echo "✅ Environment variables set"
        
    - name: Run frontend integration tests
      run: |
        echo "🚀 Starting services for frontend integration tests..."
        echo "📊 CI Environment Info:"
        echo "  - Node Version: $(node --version)"
        echo "  - NPM Version: $(npm --version)"
        echo "  - Working Directory: $(pwd)"
        echo "  - Available Ports: $(netstat -tuln | grep -E ':(3000|3001)' || echo 'Ports 3000, 3001 not in use')"
        
        ./scripts/start-services.sh &
        SERVICES_PID=$!
        echo "Services started in background (PID: $SERVICES_PID)"
        
        echo "⏳ Waiting for services to be ready..."
        timeout 120s node scripts/health-check.js
        HEALTH_CHECK_EXIT_CODE=$?
        
        if [ $HEALTH_CHECK_EXIT_CODE -ne 0 ]; then
          echo "❌ Services failed to start within 120 seconds (exit code: $HEALTH_CHECK_EXIT_CODE)"
          echo "📋 Checking service status..."
          echo "  - Background processes:"
          ps aux | grep -E "(next|tsx|start-services)" | grep -v grep || echo "No services found"
          echo "  - Port usage:"
          netstat -tuln | grep -E ':(3000|3001)' || echo 'Ports 3000, 3001 not in use'
          echo "  - Service logs (last 20 lines):"
          tail -20 /tmp/chef-chopsky-services.log 2>/dev/null || echo "No service logs found"
          exit 1
        fi
        echo "✅ All services are ready!"
        
        echo "📊 Pre-test Service Status:"
        echo "  - Frontend: $(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/ || echo 'unreachable')"
        echo "  - Agent Health: $(curl -s -o /dev/null -w '%{http_code}' http://localhost:3001/health || echo 'unreachable')"
        
        echo "🔑 Validating OpenAI API key..."
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ OPENAI_API_KEY is not set"
          exit 1
        fi
        
        # Check if API key looks valid (starts with sk-)
        if [[ ! "$OPENAI_API_KEY" =~ ^sk- ]]; then
          echo "❌ OPENAI_API_KEY does not appear to be valid (should start with 'sk-')"
          echo "Current key format: ${OPENAI_API_KEY:0:10}..."
          exit 1
        fi
        
        # Check key length (should be around 50+ characters)
        if [ ${#OPENAI_API_KEY} -lt 40 ]; then
          echo "❌ OPENAI_API_KEY appears to be too short (${#OPENAI_API_KEY} characters)"
          exit 1
        fi
        
        echo "✅ OpenAI API key validation passed"
        echo "Key format: ${OPENAI_API_KEY:0:10}... (${#OPENAI_API_KEY} characters)"
        
        echo "🧪 Running frontend integration tests..."
        cd frontend && npm run test:integration
        echo "✅ Frontend integration tests completed"
        
    - name: Stop services
      if: always()
      run: |
        echo "🛑 Stopping services..."
        npm run stop:services || true
        # Ensure cleanup
        pkill -f 'next dev' || true
        pkill -f 'tsx watch' || true
        
        echo "🛑 Stopping local Supabase..."
        cd frontend && supabase stop || true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-integration-test-results
        path: frontend/test-results/
        retention-days: 7

  e2e:
    name: E2E (shard ${{ matrix.shard }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [ '1/3', '2/3', '3/3' ]
    needs: [code-quality, integration-tests, frontend-integration-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'

    - name: Cache npm
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies with npm ci..."
        npm ci
        cd frontend && npm ci
        cd ../agent && npm ci
        cd ..
        echo "✅ Dependencies installed"
        
        echo "🔍 Verifying ts-jest installation..."
        cd frontend && npm list ts-jest
        echo "✅ ts-jest verification complete"

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-1.55.0
        restore-keys: |
          playwright-${{ runner.os }}-

    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Start Local Supabase
      run: |
        echo "🚀 Starting local Supabase (Docker-based)..."
        cd frontend 
        # Add retry logic for Docker pulls
        for i in {1..3}; do
          echo "Attempt $i to start Supabase..."
          if supabase start; then
            echo "✅ Local Supabase started successfully"
            break
          else
            echo "❌ Attempt $i failed, waiting 10s before retry..."
            sleep 10
            if [ $i -eq 3 ]; then
              echo "💥 All attempts failed, exiting"
              exit 1
            fi
          fi
        done

    - name: Extract Supabase Credentials
      run: |
        echo "🔑 Extracting Supabase credentials..."
        cd frontend
        supabase status -o env > /tmp/supabase.env
        echo "NEXT_PUBLIC_SUPABASE_URL=$(grep NEXT_PUBLIC_SUPABASE_URL /tmp/supabase.env | cut -d'=' -f2)" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=$(grep NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY /tmp/supabase.env | cut -d'=' -f2)" >> $GITHUB_ENV
        echo "SUPABASE_SECRET_KEY=$(grep SUPABASE_SECRET_KEY /tmp/supabase.env | cut -d'=' -f2)" >> $GITHUB_ENV

    - name: Install Playwright browsers
      run: cd frontend && npx playwright install --with-deps chromium

    - name: Start services
      run: |
        ./scripts/start-services.sh &
        sleep 5
        timeout 120s node scripts/health-check.js

    - name: Validate OpenAI API Key
      run: |
        echo "🔑 Validating OpenAI API key..."
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ OPENAI_API_KEY is not set"
          exit 1
        fi
        
        # Check if API key looks valid (starts with sk-)
        if [[ ! "$OPENAI_API_KEY" =~ ^sk- ]]; then
          echo "❌ OPENAI_API_KEY does not appear to be valid (should start with 'sk-')"
          echo "Current key format: ${OPENAI_API_KEY:0:10}..."
          exit 1
        fi
        
        # Check key length (should be around 50+ characters)
        if [ ${#OPENAI_API_KEY} -lt 40 ]; then
          echo "❌ OPENAI_API_KEY appears to be too short (${#OPENAI_API_KEY} characters)"
          exit 1
        fi
        
        echo "✅ OpenAI API key validation passed"
        echo "Key format: ${OPENAI_API_KEY:0:10}... (${#OPENAI_API_KEY} characters)"

    - name: Run Playwright E2E shard
      run: |
        cd frontend && npx playwright test --shard ${{ matrix.shard }}

    - name: Stop services
      if: always()
      run: |
        echo "🛑 Stopping services..."
        npm run stop:services || true
        pkill -f 'next dev' || true
        pkill -f 'tsx watch' || true
        echo "🛑 Stopping local Supabase..."
        cd frontend && supabase stop || true

    - name: Upload shard artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-${{ matrix.shard }}
        path: |
          frontend/playwright-report/
          frontend/test-results/
        retention-days: 7

  # Security and dependency check
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'
      
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        cd frontend && npm audit --audit-level=moderate
        cd ../agent && npm audit --audit-level=moderate
