name: CI

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

env:
  # Global CI environment
  NODE_ENV: development
  CI: true
  LOG_LEVEL: info
  LANGGRAPH_PORT: 2024
  LANGGRAPH_HOST: localhost
  
  # LangSmith configuration
  LANGCHAIN_TRACING: true
  LANGCHAIN_PROJECT: chef-chopsky-ci
  LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
  
  # OpenAI API key for agent tests
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  
  # Use development mode for integration tests to allow real API calls
  # Test mode skips validation and uses mocks, which breaks integration tests
  
  # Frontend build environment variables (for CI builds)
  NEXT_PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
  NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: placeholder_key
  SUPABASE_SECRET_KEY: placeholder_secret
  AGENT_SERVICE_URL: http://localhost:3001
  NEXT_PUBLIC_APP_ENV: ci
  APP_ENV: ci
  
  # Note: Supabase credentials are set dynamically after starting local Supabase CLI

jobs:
  # Code quality validation (fast feedback)
  code-quality:
    name: "Code Quality: Lint, Unit Tests, Build"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'
      
    - name: Lint code
      run: npm run lint
      
    - name: Run unit tests
      run: |
        echo "üß™ Running frontend unit tests..."
        cd frontend && npm run test:unit
        echo "ü§ñ Running agent unit tests..."
        cd .. && cd agent && npm run test:unit
      
    - name: Build applications
      run: |
        echo "üî® Building applications with NODE_ENV=production..."
        NODE_ENV=production npm run build
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-node20
        path: |
          frontend/coverage/
          agent/coverage/
        retention-days: 7

  # Integration and E2E tests with service orchestration
  integration-tests-agent:
    name: "Integration Tests: Agent"
    runs-on: ubuntu-latest
    # Run in parallel with code-quality to reduce total wall time
    
    env:
      # Agent service environment variables (inherits global env)
      LANGGRAPH_PORT: 2024
      LANGGRAPH_HOST: localhost
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'

    - name: Cache npm
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-
    
    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies with npm ci..."
        npm ci
        cd frontend && npm ci
        cd ../agent && npm ci
        cd ..
        echo "‚úÖ Dependencies installed"
        
        echo "üîç Verifying ts-jest installation..."
        cd frontend && npm list ts-jest
        echo "‚úÖ ts-jest verification complete"
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Start Local Supabase
      run: |
        echo "üöÄ Starting local Supabase (Docker-based)..."
        cd frontend 
        # Add retry logic for Docker pulls
        for i in {1..3}; do
          echo "Attempt $i to start Supabase..."
          if supabase start; then
            echo "‚úÖ Local Supabase started successfully"
            break
          else
            echo "‚ùå Attempt $i failed, waiting 10s before retry..."
            sleep 10
            if [ $i -eq 3 ]; then
              echo "üí• All attempts failed, exiting"
              exit 1
            fi
          fi
        done
        
    - name: Extract Supabase Credentials
      run: |
        echo "üîë Extracting Supabase credentials..."
        cd frontend
        supabase status -o env > /tmp/supabase.env
        echo "üìã Supabase credentials extracted to /tmp/supabase.env"
        
    - name: Set Environment Variables
      run: |
        echo "üîß Setting environment variables from Supabase..."
        cd frontend
        export $(cat /tmp/supabase.env | xargs)
        echo "NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=$NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY" >> $GITHUB_ENV
        echo "SUPABASE_SECRET_KEY=$SUPABASE_SECRET_KEY" >> $GITHUB_ENV
        echo "‚úÖ Environment variables set"
        
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-1.55.0
        restore-keys: |
          playwright-${{ runner.os }}-

    - name: Install Playwright browsers
      run: cd frontend && npx playwright install --with-deps chromium
      
    # Skip rebuilding here; dev servers are used for integration/E2E
      
    - name: Run integration tests
      run: |
        echo "üöÄ Starting services for integration and E2E tests..."
        echo "üìä CI Environment Info:"
        echo "  - Node Version: $(node --version)"
        echo "  - NPM Version: $(npm --version)"
        echo "  - Working Directory: $(pwd)"
        echo "  - Available Ports: $(netstat -tuln | grep -E ':(3000|3001)' || echo 'Ports 3000, 3001 not in use')"
        
        ./scripts/start-services.sh &
        SERVICES_PID=$!
        echo "Services started in background (PID: $SERVICES_PID)"
        
        echo "‚è≥ Waiting for services to be ready..."
        timeout 120s node scripts/health-check.js
        HEALTH_CHECK_EXIT_CODE=$?
        
        if [ $HEALTH_CHECK_EXIT_CODE -ne 0 ]; then
          echo "‚ùå Services failed to start within 120 seconds (exit code: $HEALTH_CHECK_EXIT_CODE)"
          echo "üìã Checking service status..."
          echo "  - Background processes:"
          ps aux | grep -E "(next|tsx|start-services)" | grep -v grep || echo "No services found"
          echo "  - Port usage:"
          netstat -tuln | grep -E ':(3000|3001)' || echo "Ports 3000, 3001 not in use"
          echo "  - Service logs (last 20 lines):"
          tail -20 /tmp/chef-chopsky-services.log 2>/dev/null || echo "No service logs found"
          exit 1
        fi
        echo "‚úÖ All services are ready!"
        
        # Additional CI-specific service verification
        echo "üîç Performing additional CI service verification..."
        for i in {1..5}; do
          echo "Verification attempt $i/5..."
          FRONTEND_STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/ || echo 'unreachable')
          AGENT_STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:3001/health || echo 'unreachable')
          
          if [ "$FRONTEND_STATUS" = "200" ] && [ "$AGENT_STATUS" = "200" ]; then
            echo "‚úÖ Services verified and ready for integration tests"
            break
          else
            echo "‚ö†Ô∏è Services not fully ready: Frontend=$FRONTEND_STATUS, Agent=$AGENT_STATUS"
            if [ $i -eq 5 ]; then
              echo "‚ùå Services still not ready after 5 verification attempts"
              exit 1
            fi
            sleep 3
          fi
        done
        
        echo "üìä Pre-test Service Status:"
        echo "  - Frontend: $(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/ || echo 'unreachable')"
        echo "  - Agent Health: $(curl -s -o /dev/null -w '%{http_code}' http://localhost:3001/health || echo 'unreachable')"
        
        echo "üîë Validating OpenAI API key..."
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "‚ùå OPENAI_API_KEY is not set"
          exit 1
        fi
        
        # Check if API key looks valid (starts with sk-)
        if [[ ! "$OPENAI_API_KEY" =~ ^sk- ]]; then
          echo "‚ùå OPENAI_API_KEY does not appear to be valid (should start with 'sk-')"
          echo "Current key format: ${OPENAI_API_KEY:0:10}..."
          exit 1
        fi
        
        # Check key length (should be around 50+ characters)
        if [ ${#OPENAI_API_KEY} -lt 40 ]; then
          echo "‚ùå OPENAI_API_KEY appears to be too short (${#OPENAI_API_KEY} characters)"
          exit 1
        fi
        
        echo "‚úÖ OpenAI API key validation passed"
        echo "Key format: ${OPENAI_API_KEY:0:10}... (${#OPENAI_API_KEY} characters)"
        
        echo "ü§ñ Running agent integration tests..."
        cd agent && npm run test:integration
        echo "‚úÖ Agent integration tests completed"
        
    - name: Stop services
      if: always()
      run: |
        echo "üõë Stopping services..."
        npm run stop:services || true
        # Ensure cleanup
        pkill -f 'next dev' || true
        pkill -f 'tsx watch' || true
        
        echo "üõë Stopping local Supabase..."
        cd frontend && supabase stop || true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: agent-integration-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
          frontend/coverage/integration/
        retention-days: 7

  integration-tests-frontend:
    name: "Integration Tests: Frontend"
    runs-on: ubuntu-latest
    needs: code-quality
    
    env:
      LANGGRAPH_PORT: 2024
      LANGGRAPH_HOST: localhost
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'

    - name: Cache npm
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-
    
    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies with npm ci..."
        npm ci
        cd frontend && npm ci
        cd ../agent && npm ci
        cd ..
        echo "‚úÖ Dependencies installed"
        
        echo "üîç Verifying ts-jest installation..."
        cd frontend && npm list ts-jest
        echo "‚úÖ ts-jest verification complete"
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Start Local Supabase
      run: |
        echo "üöÄ Starting local Supabase (Docker-based)..."
        cd frontend 
        # Add retry logic for Docker pulls
        for i in {1..3}; do
          echo "Attempt $i to start Supabase..."
          if supabase start; then
            echo "‚úÖ Local Supabase started successfully"
            break
          else
            echo "‚ùå Attempt $i failed, waiting 10s before retry..."
            sleep 10
            if [ $i -eq 3 ]; then
              echo "üí• All attempts failed, exiting"
              exit 1
            fi
          fi
        done
        
    - name: Extract Supabase Credentials
      run: |
        echo "üîë Extracting Supabase credentials..."
        cd frontend
        supabase status -o env > /tmp/supabase.env
        echo "üìã Supabase credentials extracted to /tmp/supabase.env"
        
    - name: Set Environment Variables
      run: |
        echo "üîß Setting environment variables from Supabase..."
        cd frontend
        export $(cat /tmp/supabase.env | xargs)
        echo "NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=$NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY" >> $GITHUB_ENV
        echo "SUPABASE_SECRET_KEY=$SUPABASE_SECRET_KEY" >> $GITHUB_ENV
        echo "‚úÖ Environment variables set"
        
    - name: Run frontend integration tests
      run: |
        echo "üöÄ Starting services for frontend integration tests..."
        echo "üìä CI Environment Info:"
        echo "  - Node Version: $(node --version)"
        echo "  - NPM Version: $(npm --version)"
        echo "  - Working Directory: $(pwd)"
        echo "  - Available Ports: $(netstat -tuln | grep -E ':(3000|3001)' || echo 'Ports 3000, 3001 not in use')"
        
        ./scripts/start-services.sh &
        SERVICES_PID=$!
        echo "Services started in background (PID: $SERVICES_PID)"
        
        echo "‚è≥ Waiting for services to be ready..."
        timeout 120s node scripts/health-check.js
        HEALTH_CHECK_EXIT_CODE=$?
        
        if [ $HEALTH_CHECK_EXIT_CODE -ne 0 ]; then
          echo "‚ùå Services failed to start within 120 seconds (exit code: $HEALTH_CHECK_EXIT_CODE)"
          echo "üìã Checking service status..."
          echo "  - Background processes:"
          ps aux | grep -E "(next|tsx|start-services)" | grep -v grep || echo "No services found"
          echo "  - Port usage:"
          netstat -tuln | grep -E ':(3000|3001)' || echo 'Ports 3000, 3001 not in use'
          echo "  - Service logs (last 20 lines):"
          tail -20 /tmp/chef-chopsky-services.log 2>/dev/null || echo "No service logs found"
          exit 1
        fi
        echo "‚úÖ All services are ready!"
        
        echo "üìä Pre-test Service Status:"
        echo "  - Frontend: $(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/ || echo 'unreachable')"
        echo "  - Agent Health: $(curl -s -o /dev/null -w '%{http_code}' http://localhost:3001/health || echo 'unreachable')"
        
        echo "üîë Validating OpenAI API key..."
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "‚ùå OPENAI_API_KEY is not set"
          exit 1
        fi
        
        # Check if API key looks valid (starts with sk-)
        if [[ ! "$OPENAI_API_KEY" =~ ^sk- ]]; then
          echo "‚ùå OPENAI_API_KEY does not appear to be valid (should start with 'sk-')"
          echo "Current key format: ${OPENAI_API_KEY:0:10}..."
          exit 1
        fi
        
        # Check key length (should be around 50+ characters)
        if [ ${#OPENAI_API_KEY} -lt 40 ]; then
          echo "‚ùå OPENAI_API_KEY appears to be too short (${#OPENAI_API_KEY} characters)"
          exit 1
        fi
        
        echo "‚úÖ OpenAI API key validation passed"
        echo "Key format: ${OPENAI_API_KEY:0:10}... (${#OPENAI_API_KEY} characters)"
        
        echo "üß™ Running frontend integration tests..."
        cd frontend && npm run test:integration 2>&1 | tee /tmp/integration-test-output.log
        FRONTEND_TEST_EXIT_CODE=$?
        
        # Capture detailed test results for debugging
        echo "üìä Test Results Analysis:"
        echo "Exit code: $FRONTEND_TEST_EXIT_CODE"
        
        # Extract failed test information
        if [ $FRONTEND_TEST_EXIT_CODE -ne 0 ]; then
          echo "‚ùå Tests failed - analyzing output..."
          
          # Look for specific test failures
          FAILED_TESTS=$(grep -E "‚úï|FAIL|Error:" /tmp/integration-test-output.log | head -10)
          if [ -n "$FAILED_TESTS" ]; then
            echo "üîç Failed test details:"
            echo "$FAILED_TESTS"
          fi
          
          # Look for timeout errors
          TIMEOUT_ERRORS=$(grep -i "timeout" /tmp/integration-test-output.log)
          if [ -n "$TIMEOUT_ERRORS" ]; then
            echo "‚è∞ Timeout errors detected:"
            echo "$TIMEOUT_ERRORS"
          fi
          
          # Look for assertion failures
          ASSERTION_ERRORS=$(grep -i "expect\|assertion\|failed" /tmp/integration-test-output.log | head -5)
          if [ -n "$ASSERTION_ERRORS" ]; then
            echo "‚ùå Assertion failures:"
            echo "$ASSERTION_ERRORS"
          fi
          
          # Show last 20 lines of test output for context
          echo "üìã Last 20 lines of test output:"
          tail -20 /tmp/integration-test-output.log
          
          # Try to identify the failing test by running individual test files
          echo "üîç Attempting to isolate the failing test..."
          echo "Running individual test files to identify the failure..."
          
          # List all test files
          TEST_FILES=$(find tests/integration -name "*.test.ts" -o -name "*.test.tsx" | sort)
          echo "Found test files:"
          echo "$TEST_FILES"
          
          # Run each test file individually to find the failing one
          for test_file in $TEST_FILES; do
            echo "Running individual test: $test_file"
            if npm run test:integration -- --testPathPattern="$test_file" 2>&1 | tee "/tmp/test-$(basename "$test_file").log"; then
              echo "‚úÖ $test_file passed"
            else
              echo "‚ùå $test_file FAILED"
              echo "Failure details:"
              cat "/tmp/test-$(basename "$test_file").log"
              break
            fi
          done
        fi
        
    - name: Stop services
      if: always()
      run: |
        echo "üõë Stopping services..."
        npm run stop:services || true
        # Ensure cleanup
        pkill -f 'next dev' || true
        pkill -f 'tsx watch' || true
        
        echo "üõë Stopping local Supabase..."
        cd frontend && supabase stop || true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-integration-test-results
        path: |
          frontend/test-results/
          /tmp/integration-test-output.log
        retention-days: 7

  e2e:
    name: E2E (shard ${{ matrix.shard }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [ '1/3', '2/3', '3/3' ]
    needs: [code-quality, integration-tests-agent, integration-tests-frontend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'

    - name: Cache npm
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies with npm ci..."
        npm ci
        cd frontend && npm ci
        cd ../agent && npm ci
        cd ..
        echo "‚úÖ Dependencies installed"
        
        echo "üîç Verifying ts-jest installation..."
        cd frontend && npm list ts-jest
        echo "‚úÖ ts-jest verification complete"

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-1.55.0
        restore-keys: |
          playwright-${{ runner.os }}-

    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Start Local Supabase
      run: |
        echo "üöÄ Starting local Supabase (Docker-based)..."
        cd frontend 
        # Add retry logic for Docker pulls
        for i in {1..3}; do
          echo "Attempt $i to start Supabase..."
          if supabase start; then
            echo "‚úÖ Local Supabase started successfully"
            break
          else
            echo "‚ùå Attempt $i failed, waiting 10s before retry..."
            sleep 10
            if [ $i -eq 3 ]; then
              echo "üí• All attempts failed, exiting"
              exit 1
            fi
          fi
        done

    - name: Extract Supabase Credentials
      run: |
        echo "üîë Extracting Supabase credentials..."
        cd frontend
        
        # Check if Supabase is running
        echo "üîç Checking Supabase status..."
        if ! supabase status > /dev/null 2>&1; then
          echo "‚ùå Supabase is not running, starting it..."
          supabase start
          sleep 10
        fi
        
        # Extract credentials with error handling
        echo "üìã Supabase status:"
        supabase status
        
        echo "üìÑ Generating environment file..."
        if supabase status -o env > /tmp/supabase.env; then
          echo "‚úÖ Environment file generated successfully"
        else
          echo "‚ùå Failed to generate environment file"
          echo "Trying alternative method..."
          
          # Alternative: Extract from supabase status output directly
          SUPABASE_STATUS=$(supabase status)
          echo "üìã Supabase status output:"
          echo "$SUPABASE_STATUS"
          
          # Extract URL from status output
          SUPABASE_URL=$(echo "$SUPABASE_STATUS" | grep "API URL" | awk '{print $3}' || echo "http://localhost:54321")
          echo "üîç Extracted URL from status: $SUPABASE_URL"
          
          # For local development, use default keys
          SUPABASE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0"
          SUPABASE_SECRET="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU"
          
          echo "üîç Using default local Supabase keys"
          echo "NEXT_PUBLIC_SUPABASE_URL=$SUPABASE_URL" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=$SUPABASE_KEY" >> $GITHUB_ENV
          echo "SUPABASE_SECRET_KEY=$SUPABASE_SECRET" >> $GITHUB_ENV
          
          echo "‚úÖ Environment variables set using alternative method"
          exit 0
        fi
        
        echo "üìã Generated environment file contents:"
        cat /tmp/supabase.env
        
        # Check if file is empty
        if [ ! -s /tmp/supabase.env ]; then
          echo "‚ùå Environment file is empty, using fallback method..."
          
          # Use default local Supabase credentials
          echo "NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" >> $GITHUB_ENV
          echo "SUPABASE_SECRET_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU" >> $GITHUB_ENV
          
          echo "‚úÖ Environment variables set using fallback method"
          exit 0
        fi
        
        # Extract credentials with fallbacks
        SUPABASE_URL=$(grep NEXT_PUBLIC_SUPABASE_URL /tmp/supabase.env | cut -d'=' -f2 || echo "")
        SUPABASE_KEY=$(grep NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY /tmp/supabase.env | cut -d'=' -f2 || echo "")
        SUPABASE_SECRET=$(grep SUPABASE_SECRET_KEY /tmp/supabase.env | cut -d'=' -f2 || echo "")
        
        echo "üîç Extracted credentials:"
        echo "  URL: ${SUPABASE_URL:0:20}..."
        echo "  Key: ${SUPABASE_KEY:0:20}..."
        echo "  Secret: ${SUPABASE_SECRET:0:20}..."
        
        # Set environment variables with validation
        if [ -n "$SUPABASE_URL" ]; then
          echo "NEXT_PUBLIC_SUPABASE_URL=$SUPABASE_URL" >> $GITHUB_ENV
          echo "‚úÖ NEXT_PUBLIC_SUPABASE_URL set"
        else
          echo "‚ùå Failed to extract NEXT_PUBLIC_SUPABASE_URL"
          echo "NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321" >> $GITHUB_ENV
          echo "‚ö†Ô∏è Using fallback URL"
        fi
        
        if [ -n "$SUPABASE_KEY" ]; then
          echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=$SUPABASE_KEY" >> $GITHUB_ENV
          echo "‚úÖ NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY set"
        else
          echo "‚ùå Failed to extract NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY"
          echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" >> $GITHUB_ENV
          echo "‚ö†Ô∏è Using fallback key"
        fi
        
        if [ -n "$SUPABASE_SECRET" ]; then
          echo "SUPABASE_SECRET_KEY=$SUPABASE_SECRET" >> $GITHUB_ENV
          echo "‚úÖ SUPABASE_SECRET_KEY set"
        else
          echo "‚ùå Failed to extract SUPABASE_SECRET_KEY"
          echo "SUPABASE_SECRET_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU" >> $GITHUB_ENV
          echo "‚ö†Ô∏è Using fallback secret"
        fi

    - name: Install Playwright browsers
      run: cd frontend && npx playwright install --with-deps chromium

    - name: Start services
      run: |
        ./scripts/start-services.sh &
        sleep 5
        timeout 120s node scripts/health-check.js

    - name: Validate Environment Variables
      run: |
        echo "üîë Validating environment variables..."
        
        # Validate OpenAI API Key
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "‚ùå OPENAI_API_KEY is not set"
          exit 1
        fi
        
        if [[ ! "$OPENAI_API_KEY" =~ ^sk- ]]; then
          echo "‚ùå OPENAI_API_KEY does not appear to be valid (should start with 'sk-')"
          echo "Current key format: ${OPENAI_API_KEY:0:10}..."
          exit 1
        fi
        
        if [ ${#OPENAI_API_KEY} -lt 40 ]; then
          echo "‚ùå OPENAI_API_KEY appears to be too short (${#OPENAI_API_KEY} characters)"
          exit 1
        fi
        
        echo "‚úÖ OpenAI API key validation passed"
        echo "Key format: ${OPENAI_API_KEY:0:10}... (${#OPENAI_API_KEY} characters)"
        
        # Validate Supabase Environment Variables
        echo "üîç Validating Supabase environment variables..."
        echo "NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL:0:30}..."
        echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY:0:30}..."
        echo "SUPABASE_SECRET_KEY: ${SUPABASE_SECRET_KEY:0:30}..."
        
        if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ] || [ "$NEXT_PUBLIC_SUPABASE_URL" = "placeholder" ]; then
          echo "‚ùå NEXT_PUBLIC_SUPABASE_URL is not properly set"
          exit 1
        fi
        
        if [ -z "$NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY" ] || [ "$NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY" = "placeholder" ]; then
          echo "‚ùå NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY is not properly set"
          exit 1
        fi
        
        if [ -z "$SUPABASE_SECRET_KEY" ] || [ "$SUPABASE_SECRET_KEY" = "placeholder" ]; then
          echo "‚ùå SUPABASE_SECRET_KEY is not properly set"
          exit 1
        fi
        
        # Validate that we have valid Supabase keys (not placeholder)
        if [ "$NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY" = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" ]; then
          echo "‚úÖ Using default local Supabase publishable key"
        fi
        
        if [ "$SUPABASE_SECRET_KEY" = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU" ]; then
          echo "‚úÖ Using default local Supabase secret key"
        fi
        
        echo "‚úÖ All environment variables validated successfully"

    - name: Verify Services Before E2E Tests
      run: |
        echo "üîç DEBUGGING: Verifying services before E2E tests..."
        
        # Check frontend service
        echo "Checking frontend service..."
        for i in {1..5}; do
          if curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/ | grep -q "200"; then
            echo "‚úÖ Frontend service is running (attempt $i)"
            break
          else
            echo "‚ùå Frontend service not ready (attempt $i), waiting 3s..."
            sleep 3
            if [ $i -eq 5 ]; then
              echo "üí• Frontend service failed to start after 5 attempts"
              exit 1
            fi
          fi
        done
        
        # Check agent service
        echo "Checking agent service..."
        for i in {1..5}; do
          if curl -s -o /dev/null -w '%{http_code}' http://localhost:3001/health | grep -q "200"; then
            echo "‚úÖ Agent service is running (attempt $i)"
            break
          else
            echo "‚ùå Agent service not ready (attempt $i), waiting 3s..."
            sleep 3
            if [ $i -eq 5 ]; then
              echo "üí• Agent service failed to start after 5 attempts"
              exit 1
            fi
          fi
        done
        
        # Check Supabase
        echo "Checking Supabase..."
        cd frontend
        if supabase status > /dev/null 2>&1; then
          echo "‚úÖ Supabase is running"
          supabase status
        else
          echo "‚ùå Supabase is not running"
          exit 1
        fi
        
        echo "‚úÖ All services verified and ready for E2E tests"

    - name: Run Playwright E2E shard
      run: |
        echo "üîç DEBUGGING: Environment variables before E2E tests:"
        echo "NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL:0:50}..."
        echo "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY:0:50}..."
        echo "SUPABASE_SECRET_KEY: ${SUPABASE_SECRET_KEY:0:50}..."
        echo "OPENAI_API_KEY: ${OPENAI_API_KEY:0:20}..."
        echo "AGENT_SERVICE_URL: $AGENT_SERVICE_URL"
        echo "NEXT_PUBLIC_APP_ENV: $NEXT_PUBLIC_APP_ENV"
        echo "APP_ENV: $APP_ENV"
        echo "NODE_ENV: $NODE_ENV"
        echo "CI: $CI"
        
        cd frontend && npx playwright test --shard ${{ matrix.shard }}

    - name: Stop services
      if: always()
      run: |
        echo "üõë Stopping services..."
        npm run stop:services || true
        pkill -f 'next dev' || true
        pkill -f 'tsx watch' || true
        echo "üõë Stopping local Supabase..."
        cd frontend && supabase stop || true

    - name: Upload shard artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-shard-${{ matrix.shard }}
        path: |
          frontend/playwright-report/
          frontend/test-results/
        retention-days: 7

  # Security and dependency check
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: '20.x'
      
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        cd frontend && npm audit --audit-level=moderate
        cd ../agent && npm audit --audit-level=moderate
